using System.Collections.ObjectModel;using System.Windows.Input;using HocusFocus.Core;namespace HocusFocus.UI.MVVM.ViewModels{    public class MainViewModel : Bindable    {        public MainViewModel()        {            ProcessItems = new ObservableCollection<ProcessViewModel>();            AppManager = new AppManager();            ConfigurationManager = new ConfigurationManager();            ProcessController = new ProcessController(ConfigurationManager);            BlacklistConfig = ConfigurationManager.LoadConfiguration();            AppManager.GetAllInstalledApps().ForEach(process => ProcessItems.Add(                new ProcessViewModel(process.Name,                    BlacklistConfig.BlockedApps.Contains(process.Name))));            foreach (var app in ProcessItems) app.PropertyChanged += OnCheckboxChecked;            FocusButtonViewModel = new FocusButtonViewModel(ProcessController);        }        public FocusButtonViewModel FocusButtonViewModel { get; }        public ObservableCollection<ProcessViewModel> ProcessItems { get; set; }        private AppManager AppManager { get; }        private BlacklistConfig BlacklistConfig { get; }        private ConfigurationManager ConfigurationManager { get; }        private ProcessController ProcessController { get; }        private void OnCheckboxChecked(object? sender, EventArgs e)        {            var processViewModel = (ProcessViewModel)sender;            if (processViewModel.IsChecked)                BlacklistConfig.BlockedApps.Add(processViewModel.Name);            else                BlacklistConfig.BlockedApps.Remove(processViewModel.Name);            ConfigurationManager.SaveConfiguration(BlacklistConfig);        }    }}